import os 
import re
import numpy as np 
import matplotlib.pyplot as plt 

from mpl_toolkits.axes_grid1 import make_axes_locatable



# Directory containing the .mco files
input_directory = "/mnt/cedar_mount_connor/cmacke01/sim7_data/Macho/2d_data"

# Output directory for saving plots
output_directory = "/home/connorshmackk785/Documents/directed-studies/Results/sim7/"

# Ensure the input directory exists
if not os.path.exists(input_directory):
    raise FileNotFoundError(f"The directory {input_directory} does not exist.")



#first job is to load in macho files -- not all grid sizes are the same. 

def load_mco(filename): 
    try: 
        with open(filename, "r") as file: 
            # the first line of .mco files shows the grid size 
            first_line - file.readline().strip().split()
            nx = int(first_line[0])
            ny = int(first_line[1])
            
            # now process the rest of the data now that we have grid resoltion
            data = []
            for line_num in range(ny): 
                line = file.readline().strip().split()

                if len(line) > nx : 
                    print(f"Warning: Line {line_num + 1} has extra points, trimming to {nx}")
                    line = line[:nx]
                elif len(line) < nx : 
                    raise ValueError(f"Line length {len(line)} does not match nx={nx} on line {line_num + 1}")
                
                data.append([float(point) for point in line])


            #convert data into a simple python array using numpy 
            data = np.array(data)

            #verify dimensions 
            if data.shape != (nx,ny): 
                raise ValueError (f"Data shape {data.shape} does not match (ny, nx)=({ny}, {nx})")
            
            return data
    except Exception as e: 
        print(f"Error loading {filename}: {e}")
        return None 
        

def plot_mco (data, title = "PIC Plots", xlabel = "X-axis", ylabel = "Y-axis", cbar_label = "Colorbar"): 
    plt.figure (figsize=(4,5))
    ax = plt.gca()
    im = ax.imshow(data, cmap = 'magma', orgin = 'lower', aspect = 'auto')
    # Create a color bar closer to the plot
    divider = make_axes_locatable(ax)
    cax = divider.append_axes("right", size="5%", pad=0.1) 
    cbar = plt.colorbar(im, cax=cax)
    cbar.set_label(cbar_label, fontsize=14)  
    ax.set_title(title, fontsize=16)  
    ax.set_xlabel(xlabel, fontsize=14)
    ax.set_ylabel(ylabel, fontsize=14)
    ax.set_xticks([])
    ax.set_yticks([])
    ax.tick_params(left=False, bottom=False) 


def save_plot(output_directory, filename):
    # Ensure the output directory exists
    os.makedirs(output_directory, exist_ok=True)
    
    # Construct the full output path
    output_path = os.path.join(output_directory, filename)
    
    # Save the plot
    plt.savefig(output_path, dpi=300, bbox_inches="tight")  # Save with high resolution
    print(f"Plot saved to {output_path}")
    
    plt.close()


# List all .mco files in the directory
mco_files = [f for f in os.listdir(input_directory) if f.endswith('.mco')]



# last touch is a dictionary of tuples to properly apply units to the plots: 
def getUnitsFromFileName(fileName):

    file_units_patterns = [
    (r"bcnd\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": ""}),
    (r"dr\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": ""}),
    (r"Ex\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": r"$ \vec{E}_x (V/m) $"}),
    (r"Ey\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": r"$\vec{E}_y (V/m)$"}),
    (r"j[1-5]\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": r"$\Gamma_i$"}),  # Gamma/Gamma_max
    (r"n[1-5]\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": r"$n_i$"}),  # Particle Density n/n_max
    (r"phi\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": r"$\phi$"}),  # Electric Potential phi/phi_max
    (r"sour[2-4]\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": "(m⁻³s⁻¹)"}),
    (r"T[1-5]\.mco", {"xlabel": "X", "ylabel": "Z", "cbar_label": r"$\frac{T_i}{T_{\text{max}}}$"})
]

    for pattern in file_units_patterns:
        if(re.match(pattern[0], fileName)):
            return(pattern[1])
        
    return({"xlabel": "X", "ylabel": "Z", "cbar_label": ""})


# Process and save plots for each .mco file
for mco_file in mco_files:
    file_path = os.path.join(input_directory, mco_file)
    print(f"Loading and plotting {mco_file}")
    
    try:
        # Load the data
        data, max_value = load_mco(file_path)  
        if data is None:
            print(f"Skipping {mco_file} due to load error.")
            continue
        
        # Retrieve unit labels based on filename pattern
        units = getUnitsFromFileName(mco_file)  
        
        # Plot the data
        plot_mco(
            data,
            title=f"Visualization of {mco_file}",
            xlabel=units["xlabel"],
            ylabel=units["ylabel"],
            cbar_label=units["cbar_label"]
        )
        
        # Save the plot
        save_plot(
            output_directory=output_directory,
            filename=f"{os.path.splitext(mco_file)[0]}.png"  # Save as PNG
        )
    except Exception as e:
        print(f"Error processing {mco_file}: {e}")

        plt.show()




    

